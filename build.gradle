apply plugin: 'build-dashboard'

allprojects {
    apply plugin: 'eclipse'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.objectweb.proactive'
    version = '5.5.0-SNAPSHOT'

    sourceCompatibility = 1.6

    repositories {
        mavenLocal()
        mavenCentral()
        mavenRepo url: 'http://repo.activeeon.com/content/repositories/snapshots/'
        mavenRepo url:'http://repo.activeeon.com/content/repositories/releases/'
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                repository(url: "http://repo.activeeon.com/content/repositories/snapshots/") {
                    authentication(userName: "${project.hasProperty('nexusUsername') ? nexusUsername : ""}",
                            password: "${project.hasProperty('nexusPassword') ? nexusPassword : ""}")
                }
            }
        }
    }

    dependencies {
        compile 'log4j:log4j:1.2.14'
        testCompile 'junit:junit:4.11'
    }
}

ext.hasGcc = {
    try {
        def p = "gcc --version".execute(); p.waitFor(); p.exitValue() == 0
    } catch (e) {
        false
    }
}()

class StubTask extends JavaExec {
    @InputFiles
    def input = project.sourceSets.main.java.srcDirs
    @OutputFiles
    def output = project.fileTree(project.sourceSets.main.output.classesDir.parent)

    def StubTask() {
        project.configurations { stubClasspath }
        project.dependencies { stubClasspath project.project(':programming-build-utils') }
        project.jar.dependsOn this
        setMain('ant.AntStubGenerator$Main')
        setClasspath((project.configurations.stubClasspath + project.sourceSets.main.runtimeClasspath))
        setArgs([ input.toArray()[0], project.sourceSets.main.output.classesDir])
        logging.captureStandardOutput LogLevel.INFO
    }

    def setClasses(List classes){
        setArgs(getArgs() + classes)
    }
}

project(':programming-core') {
    dependencies {
        compile(
                'org.mortbay.jetty:jetty:6.1.18',
                'org.tmatesoft.svnkit:trilead-ssh2:build213-svnkit-1.3-patch',
                'commons-cli:commons-cli:1.1',
                'javassist:javassist:3.11.0.GA',
                'xerces:xercesImpl:2.8.1',

                project(':programming-annotation')
        )
    }

    task stub(type: StubTask) {
        classes = ['org.objectweb.proactive.core.util.wrapper.BooleanMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.BooleanWrapper',
                'org.objectweb.proactive.core.util.wrapper.DoubleMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.DoubleWrapper',
                'org.objectweb.proactive.core.util.wrapper.FloatMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.FloatWrapper',
                'org.objectweb.proactive.core.util.wrapper.GenericTypeWrapper',
                'org.objectweb.proactive.core.util.wrapper.IntMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.IntWrapper',
                'org.objectweb.proactive.core.util.wrapper.LongMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.LongWrapper',
                'org.objectweb.proactive.core.util.wrapper.StringMutableWrapper',
                'org.objectweb.proactive.core.util.wrapper.StringWrapper',

                'org.objectweb.proactive.core.runtime.ProActiveRuntime',
                'org.objectweb.proactive.core.body.UniversalBody',
                'org.objectweb.proactive.core.jmx.util.JMXNotificationListener',
                'org.objectweb.proactive.core.util.log.remote.ProActiveLogCollector',
                'org.objectweb.proactive.core.jmx.ProActiveConnection',
                'org.objectweb.proactive.core.jmx.server.ProActiveServerImpl']
    }
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }

    // to get rid of warning about sun internal api usage
    compileJava.options.useAnt = true
    compileJava.options.compilerArgs <<  '-XDignore.symbol.file'
    compileJava.options.compilerArgs <<  '-Xlint:unchecked'
}

project(':programming-build-utils') {
    apply plugin: 'groovy'
    dependencies {
        compile gradleApi()
        compile 'ant:ant:1.7.0'
        compile 'commons-cli:commons-cli:1.2'
        compile "log4j:log4j:1.2.14"
        compile 'org.jvnet.winp:winp:1.14'
    }
}

project('programming-extensions') {
    subprojects {
        dependencies {
            compile(
                    project(':programming-core'),
                    project(':programming-annotation')
            )
        }
    }
}

project('programming-extensions:programming-extension-amqp') {
    dependencies {
        compile(
                'com.rabbitmq:amqp-client:3.0.2',
        )
    }
}

project('programming-extensions:programming-extension-annotation') {
    dependencies {
        compile files("${System.properties['java.home']}/../lib/tools.jar")
    }
}

def vfs2CompileDependencies = ['org.apache.commons:commons-vfs2:2.0']

def vfs2RuntimeDependencies = [
        'commons-net:commons-net:2.2',
        'commons-httpclient:commons-httpclient:3.1',
        'com.jcraft:jsch:0.1.42',
        'org.apache.jackrabbit:jackrabbit-webdav:1.5.2']

project('programming-extensions:programming-extension-vfsprovider') {
    dependencies {
        compile(
                vfs2CompileDependencies,
                project(':programming-extensions:programming-extension-annotation')
        )
        testCompile 'org.apache.commons:commons-vfs2:2.0:tests'
        runtime vfs2RuntimeDependencies
    }
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }
    task stub(type: StubTask) {
        classes = ['org.objectweb.proactive.extensions.vfsprovider.protocol.FileSystemServer',
                'org.objectweb.proactive.extensions.vfsprovider.server.FileSystemServerImpl']
    }
}

project('programming-extensions:programming-extension-dataspaces') {
    dependencies {
        compile(
                vfs2CompileDependencies,
                project(':programming-extensions:programming-extension-vfsprovider')
        )
        runtime vfs2RuntimeDependencies
    }
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }
    task stub(type: StubTask) {
        classes = ['org.objectweb.proactive.extensions.dataspaces.core.naming.NamingService']
    }
}

project('programming-extensions:programming-extension-gcmdeployment') {
    dependencies {
        compile(
                'commons-cli:commons-cli:1.1',
                project(':programming-extensions:programming-extension-dataspaces')
        )
    }
    task stub(type: StubTask) {
        classes = ['org.objectweb.proactive.extensions.gcmdeployment.GCMApplication.GCMApplicationImpl',
                'org.objectweb.proactive.extensions.gcmdeployment.core.GCMVirtualNodeImpl']
    }
}

project('programming-extensions:programming-extension-pnp') {
    dependencies {
        compile(
                'org.jboss.netty:netty:3.2.2.Final'
        )
    }
}

project('programming-extensions:programming-extension-pnpssl') {
    dependencies {
        compile(
                'bouncycastle:bcprov-jdk15:136',
                'org.jboss.netty:netty:3.2.2.Final',

                project(':programming-extensions:programming-extension-pnp')
        )
    }
}

project('programming-extensions:programming-extension-processbuilder') {
    dependencies {
        compile(
                'net.java.dev.jna:jna:3.4.0',
                'net.java.dev.jna:platform:3.4.0'
        )
    }

    if (hasGcc) {
        def configureSuer = { task, arch ->
            buildDir.mkdirs()
            task.ignoreExitValue = true
            task.inputs.file "${projectDir}/src/main/c/suer.c"
            task.outputs.file "${buildDir}/suer$arch"
            task.commandLine 'gcc'
            task.args "-m$arch", '-o', "${buildDir}/suer$arch", "${projectDir}/src/main/c/suer.c", '-lutil', '-lpthread'
        }
        task(suer64, type: Exec) { task -> configureSuer(task, '64') }
        task(suer32, type: Exec) { task -> configureSuer(task, '32') }
        task(suer).dependsOn suer64, suer32
        build.dependsOn suer
    }
}

project(':programming-test') {
    dependencies {
        testCompile(
                'commons-io:commons-io:2.4',
                'org.apache.commons:commons-vfs2:2.0',

                project(':programming-annotation'),
                project(':programming-core'),
                project(':programming-extensions').subprojects
        )
    }

    sourceSets {
        test {
            java {
                srcDir 'src'
                exclude '**/functionalTests/annotations/*/inputs/**'
            }
        }
    }

    def testConfiguration = {
        forkEvery 1

        testLogging {
            exceptionFormat = 'full'
        }
        beforeTest { descriptor ->
            logger.lifecycle("Running: " + descriptor)
        }

        systemProperties << ['proactive.home': projectDir.absolutePath]
        systemProperties << ['proactive.runtime.ping': false]
        systemProperties << ['java.security.policy': file('src/test/resources/proactive.java.policy').absolutePath]
        dependsOn 'copyToLib'
    }

    task functionalTest(type: Test, group: 'ProActive')
    functionalTest.configure testConfiguration
    functionalTest.configure {
        include 'functionalTests/**'
        include 'gcmdeployment/**'
        exclude '**/TestHeartbeat*'
    }

    def protocols = ['rmi', 'pnp', 'pamr', 'pnps', 'rmissl', 'rmissh', 'http']
    protocols.each { protocol ->
        def testProtocol = task "functionalTest-$protocol"(type: Test)
        testProtocol.configure testConfiguration
        testProtocol.configure {
            include 'functionalTests/**'
            exclude '**/TestHeartbeat*'
            reports.junitXml.destination file("${reports.junitXml.destination}/$protocol")
            reports.html.destination file("${reports.html.destination}/$protocol")
            systemProperties << ['proactive.communication.protocol': protocol]
            systemProperties << ['proactive.pamr.router.address': 'localhost']
            systemProperties << ['proactive.pamr.router.port': 0]
        }
    }
    task "functionalTest-all"(dependsOn: protocols.collect { "functionalTest-$it" })

    task pamrHearbeatTest(type: Test, group: 'ProActive') {
        include '**/TestHeartbeat*'

        systemProperties << ['-Djdwp.port': 5550]
        jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5550'
    }

    task performanceTest(type: Test, group: 'ProActive')
    performanceTest.configure testConfiguration
    performanceTest.configure {
        include 'performanceTests/**'
    }

    // disable test, use allTest to run the tests
    task(allTest).dependsOn pamrHearbeatTest, functionalTest, performanceTest
    test.enabled = false

    // for the test nodes to have the ProActive jars
    task copyToLib(type: Copy) {
        from configurations.testCompile
        into "$buildDir/dist/lib"
    }

}

apply from: 'dist.gradle'
