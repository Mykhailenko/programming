subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    group = 'org.objectweb.proactive'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        compile 'log4j:log4j:1.2.14'
        testCompile 'junit:junit:4.11'
    }
}

def distSubProjects = subprojects - project(':programming-build-utils') - project(':programming-test')

project(':programming-core') {
    configurations { antClasspath }
    dependencies {
        compile(
                'org.mortbay.jetty:jetty:6.1.18',
                'org.tmatesoft.svnkit:trilead-ssh2:build213-svnkit-1.3-patch',
                'commons-cli:commons-cli:1.1',
                'javassist:javassist:3.11.0.GA',
                'xerces:xercesImpl:2.8.1',

                project(':programming-annotation')
        )
        antClasspath project(':programming-build-utils')
    }

    task stub(dependsOn: ['compileJava', 'processResources']) {
        inputs.file sourceSets.main.java.srcDirs
        outputs.file fileTree(sourceSets.main.output.classesDir.parent)
        doLast {
            ant.taskdef(name: 'stub', classname: 'ant.AntStubGenerator', classpath: configurations.antClasspath.asPath)
            ant.references.test = sourceSets.main.compileClasspath.files
            ant.stub(srcdir: sourceSets.main.java.srcDirs.toArray()[0],
                    dstdir: sourceSets.main.output.classesDir,
                    classpath: (configurations.antClasspath + sourceSets.main.runtimeClasspath).asPath) {
                'class'(name: "org.objectweb.proactive.core.util.wrapper.BooleanMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.BooleanWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.DoubleMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.DoubleWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.FloatMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.FloatWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.GenericTypeWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.IntMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.IntWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.LongMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.LongWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.StringMutableWrapper")
                'class'(name: "org.objectweb.proactive.core.util.wrapper.StringWrapper")

                'class'(name: "org.objectweb.proactive.core.runtime.ProActiveRuntime")
                'class'(name: "org.objectweb.proactive.core.body.UniversalBody")
                'class'(name: "org.objectweb.proactive.core.jmx.util.JMXNotificationListener")
                'class'(name: "org.objectweb.proactive.core.util.log.remote.ProActiveLogCollector")
                'class'(name: "org.objectweb.proactive.core.jmx.ProActiveConnection")
                'class'(name: "org.objectweb.proactive.core.jmx.server.ProActiveServerImpl")
            }
        }
    }
    classes.dependsOn stub
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }
}

project(':programming-build-utils') {
    dependencies {
        compile 'ant:ant:1.7.0'
        compile 'commons-cli:commons-cli:1.2'
        compile "log4j:log4j:1.2.14"
        compile 'org.jvnet.winp:winp:1.14'

    }
}

project('programming-extensions') {
    subprojects {
        dependencies {
            compile(
                    project(':programming-core'),
                    project(':programming-annotation')
            )
        }
    }
}

project('programming-extensions:programming-extension-amqp') {
    dependencies {
        compile(
                'com.rabbitmq:amqp-client:3.0.2',
        )
    }
}


project('programming-extensions:programming-extension-annotation') {
    dependencies {
        compile files("${System.properties['java.home']}/../lib/tools.jar")
    }
}


project('programming-extensions:programming-extension-vfsprovider') {
    dependencies {
        compile(
                'org.apache.commons:commons-vfs2:2.0',
                'commons-net:commons-net:2.2',
                'commons-httpclient:commons-httpclient:3.1',
                'com.jcraft:jsch:0.1.42',
                'org.apache.jackrabbit:jackrabbit-webdav:1.5.2',

                project(':programming-extensions:programming-extension-annotation')
        )
        testCompile 'org.apache.commons:commons-vfs2:2.0:tests'
    }
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }
}

project('programming-extensions:programming-extension-dataspaces') {
    dependencies {
        compile(
                'org.apache.commons:commons-vfs2:2.0',
                'commons-net:commons-net:2.2',
                'commons-httpclient:commons-httpclient:3.1',
                'com.jcraft:jsch:0.1.42',
                'org.apache.jackrabbit:jackrabbit-webdav:1.5.2',

                project(':programming-extensions:programming-extension-vfsprovider')
        )
    }
    test {
        systemProperties << ['proactive.classloading.useHTTP': false]
    }
}

project('programming-extensions:programming-extension-gcmdeployment') {
    dependencies {
        compile(
                project(':programming-extensions:programming-extension-dataspaces')
        )
    }
}

project('programming-extensions:programming-extension-gcmdeployment') {
    dependencies {
        compile(
                'commons-cli:commons-cli:1.1'
        )
    }
}

project('programming-extensions:programming-extension-pnp') {
    dependencies {
        compile(
                'org.jboss.netty:netty:3.2.2.Final'
        )
    }
}

project('programming-extensions:programming-extension-pnpssl') {
    dependencies {
        compile(
                'bouncycastle:bcprov-jdk15:136',
                'org.jboss.netty:netty:3.2.2.Final',

                project(':programming-extensions:programming-extension-pnp')
        )
    }
}

project('programming-extensions:programming-extension-processbuilder') {
    dependencies {
        compile(
                'net.java.dev.jna:jna:3.4.0',
                'net.java.dev.jna:platform:3.4.0'
        )
    }
}

project(':programming-test') {
    dependencies {
        testCompile(
                'commons-io:commons-io:2.4',
                'org.apache.commons:commons-vfs2:2.0',

                project(':programming-annotation'),
                project(':programming-core'),
                project(':programming-extensions').subprojects
        )
    }

    sourceSets {
        test {
            java {
                srcDir 'src'
                exclude '**/functionalTests/annotations/*/inputs/**'
            }
        }
    }

    def testConfiguration = {
        forkEvery 1

        testLogging {
            exceptionFormat = 'full'
        }

        systemProperties << ['proactive.home': projectDir.absolutePath]
        systemProperties << ['proactive.runtime.ping': false]
        systemProperties << ['java.security.policy': file('src/test/resources/proactive.java.policy').absolutePath]
    }
    
    test.configure testConfiguration
    test.configure {
        exclude '**/TestHeartbeat*'
        exclude '**/performanceTests/**'
    }

    task testPamrHeartBeat(type: Test) {
        include '**/TestHeartbeat*'

        systemProperties << ['-Djdwp.port': 5550]
        jvmArgs '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5550'
    }
    test.dependsOn testPamrHeartBeat

    task performanceTest(type: Test)
    performanceTest.configure testConfiguration
    performanceTest.configure {
        exclude '**/functionalTests/**'
        include '**/performanceTests/**'
    }

    task copyToLib(type: Copy) {
        from configurations.testCompile
        into "$buildDir/dist/lib"
    }

    test.dependsOn copyToLib
}


task ProActiveLibs(type: Copy) {
    distSubProjects.each {
        from it.configurations.runtime.files { it instanceof ExternalDependency }
    }
    into "dist/lib"
}

task ProActiveJar(type: Jar, dependsOn: ['ProActiveLibs', 'MergeMetaInfServices']) {
    from "$buildDir/jar"
    distSubProjects.each {
        from it.jar.outputs.files.collect { zipTree(it) }
    }
    destinationDir file('dist/lib')
    archiveName 'ProActive.jar'
    duplicatesStrategy DuplicatesStrategy.EXCLUDE // services are merged
    manifest {
        attributes("Main-Class": "org.objectweb.proactive.Main",
                "Implementation-Title": "ProActive",
                "Implementation-Version": "",
                "Implementation-Vendor": "OASIS - INRIA Sophia Antipolis",
                "Implementation-URL": "http://proactive.inria.fr")
    }
    outputs.file file('dist/lib')
    doLast {
        // generate INDEX.list
        ant.jar(update: true, index: true, destfile: file('dist/lib/ProActive.jar')) {
            indexjars {
                fileset(dir: 'dist/lib/') {
                    include(name: '*.jar')
                    exclude(name: 'ProActive.jar')
                }
            }
        }
    }
}

task MergeMetaInfServices {
    inputs.file distSubProjects.jar.outputs
    outputs.file fileTree("$buildDir/jar/META-INF/services/")
    doLast {
        def serviceFile = distSubProjects.collect {
            it.jar.outputs.files.collect {
                zipTree(it).matching {
                    include 'META-INF/services/**'
                }.files
            }
        }.flatten()
        serviceFile.groupBy { it.name }.each { k, v ->
            new File("$buildDir/jar/META-INF/services/$k").with {
                getParentFile().mkdirs();
                write(v*.text.join('\n'))
            }
        }
    }
}

task('build').dependsOn(ProActiveJar, subprojects.build)
ProActiveJar.dependsOn(distSubProjects.jar)
MergeMetaInfServices.dependsOn(distSubProjects.jar)
defaultTasks 'build'