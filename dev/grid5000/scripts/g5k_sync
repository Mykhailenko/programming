#! /bin/sh

source $(dirname $0)/g5k_lib.sh

function print_help {
	echo -e "Usage: $0 -d dir [-a|-o|-c cluster]"
	echo -e "Synchronize a directory between two clusters\n"
	echo -e "\t-d dir     , directory to be synchronized"
	modopt_print_help
	exit 1
}

_rsync () {
	# test if dirname ends with a /
	#if yes we have to remove it
	END_SLASH=` echo $1 | sed -e 's:.*/::g' `
	THE_PATH="$1"

	#if [ -z $END_SLASH ]
	#then
	#  THE_PATH=${THE_PATH%%/}
	#fi
 
	ERR_FILE=$(mktemp)
	rsync -avz --rsh="$SSH_CMD" "$THE_PATH" "$2" > $ERR_FILE 2>&1 
	
	if [ $? -eq 0 ]
	then
	  echo OK
	else
	  echo "*** FAILED ***"
		echo -e "\n============== Errors ====================\n"
		cat $ERR_FILE
		echo -e "\n------------------------------------------\n\n"
	fi
}

ARGS="d:h"
OPT_D=NO	

modopt_parse $ARGS $*
while getopts "${MODOPT_OPTS}${ARGS}" Option
do
	case $Option in
  d) OPT_D=$OPTARG ;;
	h) print_help ;;
	*)
		modopt_error_handle $Option
		if [ "$?" -eq 0 ] ; then
			echo -e "Invalid option: $OPTARG"
			print_help
			exit 1
		fi
	;;
	esac
done


if [ "$OPT_D" == "NO" ] ;
then
 echo "-d is mandatory. Please see $0 -h"
 exit 2
fi

for i in `seq 0 $((${#OPTIONS_CLUSTERS[@]}-1))` ; 
do
	CLUSTER=${OPTIONS_CLUSTERS[$i]}

	if [ "$CLUSTER" == "$(get_cluster)" ] ; then
		continue
	fi

	echo -n "-> Syncing $OPT_D: $(get_cluster) -> $CLUSTER:  "
	_rsync $OPT_D $(get_sync_hostname $CLUSTER):$OPT_D
done
