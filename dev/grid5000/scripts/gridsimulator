#! /bin/bash

ROOT_DIR=$(dirname $0)
source $ROOT_DIR/g5k_lib.sh

SSH=$ROOT_DIR/deploy/ssh_autologin.exp

function print_help {
	echo -e "Usage: $0 -b bandwith -l lantency -k nbgroups nodes...\n\n"
	echo -e "\t-b bandwith     , bandwith allowed for intergroup communications"
	echo -e "\t-l latency      , latency between groups"
	echo -e "\t-k nbgroups     , number of groups to create"
	exit 0
}

ARGS="k:l:b:"

OPT_K=NO
OPT_L=NO
OPT_B=NO

while getopts "${ARGS}" Option
do
	case $Option in
	k)
		OPT_K=$OPTARG
	;;
	l)
		OPT_L=$OPTARG
	;;
	b)
		OPT_B=$OPTARG
	;;
	*)
		print_help
	;;
	esac
done

if [ "$OPT_K" == "NO" -o "$OPT_L" == "NO" -o "$OPT_B" == "NO" ] ; then
	print_help
	exit 1
fi

shift 6 # Skip -l -k -b parameters 

NODES=$@
NBNODES=$#
if [ $NBNODES -lt $OPT_K ] ; 
then
	echo -e "To few nodes to create $OPT_K groups. Aborting..." 1>&2
	exit 1
fi

echo "-> Deploying fedora image on nodes[$NODES]"
$ROOT_DIR/deploy_azur_fedora $OPT_R $NODES

nodesok=`$ROOT_DIR/g5k_reservedNodes -c`
OPT_R=`echo $nodesok | cut -d' ' -f1`
NODES=`echo $nodesok | cut -d' ' -f2- `

echo "Router: $OPT_R"
echo "Nodes: $NODES"

# Fill groups
declare -a groups 
index=0
tmp="$NODES "
echo $tmp
while [ "$tmp" != "" ] ; 
do
	groups[$index]="${groups[$index]} `echo $tmp | cut -d' ' -f1`"
	tmp=`echo "$tmp" | cut  -d' ' -f2-`
	index=`expr \( $index + 1 \) % $OPT_K`
done



function configure_router {
	router_name=$1
	ssh_exec="$SSH $ROOT_PASSWD $OPT_R "

	echo -e "-> Configuring router: $1" 1>&2
	local TMPFILE=`mktemp -p ~`
		
	echo "#! /bin/sh" > $TMPFILE
	chmod +rx $TMPFILE

	echo "echo 1 > /proc/sys/net/ipv4/ip_forward" >> $TMPFILE
	for ((i=0; i<$OPT_K; i++)) ;
	do
		echo "ifconfig eth0:$i 192.168.20$i.1" >> $TMPFILE
	done

	echo "ln -s /usr/lib64/tc /usr/lib" >> $TMPFILE
	
	echo "tc qdisc del dev eth0 root" >> $TMPFILE
	echo "tc qdisc add dev eth0 root handle 1:0 htb default 1" >> $TMPFILE
	echo "tc class add dev eth0 parent 1:0 classid 1:1 htb rate 1000tbit burst 0" >> $TMPFILE
	echo "tc class add dev eth0 parent 1:0 classid 1:2 htb rate ${OPT_B}mbit burst 10kb" >> $TMPFILE
	echo "tc qdisc add dev eth0 parent 1:2 handle 2:0 netem delay ${OPT_L}ms" >> $TMPFILE
	echo "iptables -t mangle -F" >> $TMPFILE
	echo "iptables -t mangle -A POSTROUTING ! -d 138.96.20.214 -j CLASSIFY --set-class 1:2" >> $TMPFILE

	if [ "$VERBOSE" == "Yes" ] ; then
		echo "    [*] Following script will be executed on $OPT_R" 1>&2
		cat $TMPFILE
		echo
		echo
	fi
	
	
	$ssh_exec $TMPFILE 
	rm $TMPFILE
}


function configure_host {
	fqdn=$1
	ip=$2
	site=$3
	ssh_exec="$SSH $ROOT_PASSWD $fqdn "

	local TMPFILE=`mktemp -p ~`
	echo "#! /bin/sh" > $TMPFILE
	chmod +rx $TMPFILE

	echo "    [*] FQDN=$fqdn IP=$ip GROUP=$site" 1>&2	
	echo "        [*] ifconfig eth0:1 $ip" 1>&2

	echo "ifconfig eth0:1 $ip" >> $TMPFILE

	for (( z=0;z<$OPT_K;z++ )) ; 
	do 
		if [ $z -eq $site ] ; then continue ; fi
		echo "route add -net 192.168.20$z.0 netmask 255.255.255.0 gw 192.168.20$site.1" >> $TMPFILE
	done

	echo "rpm -Uvh ~cmathieu/DONTTOUCH/arptables_jf-0.0.8-4.x86_64.rpm" >> $TMPFILE

	for (( z=0;z<$OPT_K;z++ )) ; 
	do 
		if [ $z -eq $site ] ; then continue  ; fi
		echo " arptables -A IN -s 192.168.20$z.0/24 -j DROP" >> $TMPFILE
	done
	
	for (( z=0;z<$OPT_K;z++ )) ; 
	do 
		hosts=${groups[$z]}
		while [ "$hosts" != "" ] ; 
		do
			host=`echo $hosts | cut -d' ' -f1`
			local ip=`create_ip_address $host $z`
			local sname=`echo $host | cut -d'.' -f1`
			echo "echo $ip  $host  $sname >> /etc/hosts" >> $TMPFILE
		
			hosts=`echo $hosts | cut -s -d' ' -f2-`
		done
	done

	if [ "$VERBOSE" == "Yes" ] ; then
		echo "    [*] Following script will be executed on $OPT_R" 1>&2
		cat $TMPFILE
		echo
		echo
	fi
	
	$ssh_exec $TMPFILE
	rm $TMPFILE
}

function create_ip_address {
	local fqdn=$1
	local site=$2

	local end=`expr match $fqdn 'node-\([0-9]\+\).*'`
	echo 192.168.20$site.$end
}
	
function configure_site {
	ssite=$1

	shost=""
	shosts="${groups[$ssite]} "
	echo "-> Configuring site: $ssite [$shosts]" 1>&2
	
	while [ "$shosts" != "" ] ; 
	do
		shost=`echo $shosts | cut -d' ' -f1`
		configure_host $shost `create_ip_address $shost $ssite` $ssite
		
		
		local shosts=`echo $shosts | cut -s -d' ' -f2-`
	done
}

function configure_nodes {
	for ((k=0; k<$OPT_K; k++));
	do 
		configure_site $k
	done
}

configure_router $OPT_R
configure_nodes

echo
echo
echo
echo
echo ROUTER: $OPT_R
echo ROUTER: $OPT_R > ~/.gridsimulator
for ((k=0; k<$OPT_K; k++));
do 
	echo "Group $k: ${groups[$k]} "
	echo "Group $k: ${groups[$k]} " >> ~/.gridsimulator
done
echo "Hint: see ~/.gridsimulator "

exit 0


