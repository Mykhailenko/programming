#! /bin/bash

ROOT_DIR=$(dirname $0)
source $ROOT_DIR/g5k_lib.sh

SSH=$ROOT_DIR/deploy/ssh_autologin.exp

function print_help {
	echo -e "Usage: $0 [-g l1:b1]+ nodes...\n\n"
	echo -e "\t-g latency:bandwith     , define a group"
	echo -e "\t-r                      , reconfigure router and nodes"
	exit 0
}

ARGS="g:r"

OPT_G=0
OPT_R=NO
declare -a groups_args
while getopts "${ARGS}" Option
do
	case $Option in
	g)
		groups_args[$OPT_G]=$OPTARG
		OPT_G=$(( OPT_G + 1 )) 
	;;
	r)
		OPT_R=YES
	;;
	*)
		print_help
	;;
	esac
done

if [ $OPT_G -lt 1 ] ; then
	print_help
	exit 1
fi

shift $(( OPTIND - 1 )) # Skip -g parameters 

NODES=$@

NBNODES=$#
if [ $NBNODES -lt $OPT_G ] ; 
then
	echo -e "To few nodes to create $OPT_G groups. Aborting..." 1>&2
	exit 1
fi

if [ "$OPT_R" == "NO" ] ; then
	echo "-> Deploying fedora image on nodes[$NODES]"
	$ROOT_DIR/deploy_azur_fedora $OPT_R $NODES
fi

nodesok=`$ROOT_DIR/g5k_reservedNodes -c`
ROUTER=`echo $nodesok | cut -d' ' -f1`
NODES=`echo $nodesok | cut -d' ' -f2- `

echo "Router: $ROUTER"
echo "Nodes: $NODES"

# Fill groups
declare -a groups 
index=0
tmp="$NODES "
echo $tmp
while [ "$tmp" != "" ] ; 
do
	groups[$index]="${groups[$index]} `echo $tmp | cut -d' ' -f1`"
	tmp=`echo "$tmp" | cut  -d' ' -f2-`
	index=`expr \( $index + 1 \) % $OPT_G`
done

# Choose a random private subnetwork
SUBNET=192.168.`expr $RANDOM % 24`

function configure_router {
	router_name=$1
	ssh_exec="$SSH $ROOT_PASSWD $ROUTER "

	echo -e "-> Configuring router: $1" 1>&2
	TMPFILE=`mktemp -p ~`
		
	echo "#! /bin/sh" > $TMPFILE
	chmod +rx $TMPFILE

	echo "echo 1 > /proc/sys/net/ipv4/ip_forward" >> $TMPFILE
	for ((i=0; i<$OPT_G; i++)) ;
	do
		echo "ifconfig eth0:$i ${SUBNET}$i.1" >> $TMPFILE
	done

	echo "ln -f -s /usr/lib64/tc /usr/lib" >> $TMPFILE
	
	echo "tc qdisc del dev eth0 root" >> $TMPFILE
	echo "tc qdisc add dev eth0 root handle 1:0 htb default 1" >> $TMPFILE
	echo "tc class add dev eth0 parent 1:0 classid 1:1 htb rate 1000tbit burst 0" >> $TMPFILE
	echo "iptables -t mangle -F" >> $TMPFILE

	echo OPT_G: $OPT_G
	local counter=2
	for (( z=0;z<$OPT_G;z++ )) ; 
	do
		for (( y=0;y<$OPT_G;y++ )) ;
		do
			if [ $z -eq $y ] ; then continue ; fi
			
			from=${groups_args[$z]}
			dest=${groups_args[$y]}

			from_lat=`echo $from | cut -d':' -f 1`			
			dest_lat=`echo $dest | cut -d':' -f 1`			
			lat=$(( from_lat + dest_lat ))

			from_bw=`echo $from | cut -d':' -f 2`			
			dest_bw=`echo $dest | cut -d':' -f 2`			
			bw=""
			if [ $from_bw -lt $dest_bw ] ; then
				bw=$from_bw
			else
				bw=$dest_bw
			fi
			
			echo "tc class add dev eth0 parent 1:0 classid 1:$counter htb rate ${bw}mbit burst 5000mb" >> $TMPFILE
			echo "tc qdisc add dev eth0 parent 1:$counter handle $counter:0 netem delay ${lat}ms" >> $TMPFILE

			echo "iptables -t mangle -A POSTROUTING -s ${SUBNET}$z.0/24 -d ${SUBNET}$y.0/24 -j CLASSIFY --set-class 1:$counter" >> $TMPFILE

			counter=$(( counter + 1 ))
		done
	done

	if [ "$VERBOSE" == "Yes" ] ; then
		echo "    [*] Following script will be executed on $ROUTER" 1>&2
		cat $TMPFILE
		echo
		echo
	fi
	
	$ssh_exec $TMPFILE 
	rm $TMPFILE
}


function configure_host {
	fqdn=$1
	ip=$2
	site=$3
	ssh_exec="$SSH $ROOT_PASSWD $fqdn "

	local TMPFILE=`mktemp -p ~`
	echo "#! /bin/sh" > $TMPFILE
	chmod +rx $TMPFILE

	echo "    [*] FQDN=$fqdn IP=$ip GROUP=$site" 1>&2	
	echo "        [*] ifconfig eth0:1 $ip" 1>&2

	# Network Interface & routes & tunning
	echo "ifconfig eth0:1 $ip" >> $TMPFILE

	echo "echo 12800000 > /proc/sys/net/core/wmem_max" >> $TMPFILE
	echo "echo 12800000 > /proc/sys/net/core/rmem_max" >> $TMPFILE
	echo "echo 12800000 12800000 12800000 > /proc/sys/net/ipv4/tcp_wmem" >> $TMPFILE
	echo "echo 12800000 12800000 12800000 > /proc/sys/net/ipv4/tcp_rmem" >> $TMPFILE

	echo "echo 0 > /proc/sys/net/ipv4/tcp_no_metrics_save" >> $TMPFILE
	echo "echo 0 > /proc/sys/net/ipv4/tcp_westwood" >> $TMPFILE
#	echo "echo htcp > /proc/sys/net/ipv4/tcp_congestion_control" >> $TMPFILE

	for (( z=0;z<$OPT_G;z++ )) ; 
	do 
		if [ $z -eq $site ] ; then continue ; fi
		echo "route add -net ${SUBNET}$z.0 netmask 255.255.255.0 gw ${SUBNET}$site.1" >> $TMPFILE
	done

	# Installing & Configuring arptables
	echo "rpm -Uvh ~cmathieu/DONTTOUCH/arptables_jf-0.0.8-4.x86_64.rpm" >> $TMPFILE

	echo " arptables -F" >> $TMPFILE
	for (( z=0;z<$OPT_G;z++ )) ; 
	do 
		if [ $z -eq $site ] ; then continue  ; fi
		echo " arptables -A IN -s ${SUBNET}$z.0/24 -j DROP" >> $TMPFILE
	done
	
	# Populating /etc/hosts
	echo "echo 127.0.0.1               localhost.localdomain localhost > /etc/hosts"  >> $TMPFILE	
	for (( z=0;z<$OPT_G;z++ )) ; 
	do 
		hosts=${groups[$z]}
		while [ "$hosts" != "" ] ; 
		do
			host=`echo $hosts | cut -d' ' -f1`
			local ip=`create_ip_address $host $z`
			local sname=`echo $host | cut -d'.' -f1`
			echo "echo $ip  $host  $sname >> /etc/hosts" >> $TMPFILE
		
			hosts=`echo $hosts | cut -s -d' ' -f2-`
		done
	done

	if [ "$VERBOSE" == "Yes" ] ; then
		echo "    [*] Following script will be executed on $fqdn" 1>&2
		cat $TMPFILE
		echo
		echo
	fi
	
	$ssh_exec $TMPFILE
	rm $TMPFILE
}

function create_ip_address {
	local fqdn=$1
	local site=$2

	local end=`expr match $fqdn 'node-\([0-9]\+\).*'`
	echo ${SUBNET}$site.$end
}
	
function configure_site {
	ssite=$1

	shost=""
	shosts="${groups[$ssite]} "
	echo "-> Configuring site: $ssite [$shosts]" 1>&2
	
	while [ "$shosts" != "" ] ; 
	do
		shost=`echo $shosts | cut -d' ' -f1`
		configure_host $shost `create_ip_address $shost $ssite` $ssite
		
		
		local shosts=`echo $shosts | cut -s -d' ' -f2-`
	done
}

function configure_nodes {
	for ((k=0; k<$OPT_G; k++));
	do 
		configure_site $k
	done
}

configure_router $ROUTER
configure_nodes

echo
echo
echo
echo
echo ROUTER: $ROUTER
echo ROUTER: $ROUTER > ~/.gridsimulator
for ((k=0; k<$OPT_G; k++));
do 
	site=${groups_args[$k]}
	lat=`echo $site | cut -d':' -f 1`			
	bw=`echo $site | cut -d':' -f 2`			
		
	echo "Group $k: latency=$lat bandwith=$bw"
	echo -e "\t${groups[$k]} "

	echo "Group $k: latency=$lat bandwith=$bw" >> ~/.gridsimulator
	echo -e "\t${groups[$k]} " >> ~/.gridsimulator
done
echo "Hint: see ~/.gridsimulator "

exit 0
