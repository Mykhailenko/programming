<?xml version="1.0" encoding="utf-8"?><appendix xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="ReferenceCard"><info><title xml:id="ReferenceCard_76">Reference Card</title></info>


  <para><emphasis role="bold">ProActive</emphasis> is a Java library for
  <emphasis role="bold">parallel</emphasis>, <emphasis role="bold">distributed</emphasis>, and <emphasis role="bold">concurrent</emphasis> computing in a uniform framework. <emphasis role="bold">ProActive</emphasis> provides a comprehensive API and a
  graphical interface. The library is based on an Active Object pattern that is a uniform way to encapsulate:</para>

  <informaltable frame="none" colsep="0">
    <tgroup cols="2">
      <tbody>
        <row>
          <entry align="left" valign="middle"><para> <itemizedlist>
              <listitem>
                <para><emphasis role="bold">a remotely</emphasis> accessible
                object,</para>
              </listitem>

              <listitem>
                <para>a <emphasis role="bold">thread</emphasis> as an
                asynchronous activity,</para>
              </listitem>
              
              <listitem>
                <para>a <emphasis role="bold">server</emphasis> of incoming
                requests,</para>
              </listitem>

            </itemizedlist> </para></entry>
            
        </row>
      </tbody>
    </tgroup>
  </informaltable>

  <para><emphasis role="bold">ProActive</emphasis> is only made of standard
  Java classes, and requires <emphasis role="bold">no changes to the Java
  Virtual Machine</emphasis>. Overall, it simplifies the programming of
  applications distributed over Local Area Network (LAN), Clusters, Intranet
  or Internet GRIDs.</para>

  <section xml:id="Mainconceptsanddefinitions_76"><info><title>Main concepts and definitions</title></info>


    <para><itemizedlist>


      <listitem>
				<indexterm><primary>Active Object</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Active Objects (AO):</emphasis> a remote
          object, with its own thread, receiving calls on its public
          methods</para>
        </listitem>


        <listitem>
					<indexterm><primary>Activity</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">FIFO activity:</emphasis> an AO, by
          default, executes the request it receives one after the other, in
          the order they were received</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">No-sharing:</emphasis> standard Java
          objects cannot be referenced from 2 AOs, ensured by deep-copy of
          constructor params, method params, and results</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Asynchronous Communications:</emphasis>
          method calls towards AOs are asynchronous</para>
        </listitem>


          <listitem>
						<indexterm><primary>Future</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Future:</emphasis> the result of a
          non-void asynchronous method call</para>
        </listitem>

        <listitem>
					<indexterm><primary>Request</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Request:</emphasis> the occurrence of a
          method call towards an AO</para>
        </listitem>


        <listitem>
					<indexterm><primary>Service</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Service:</emphasis> the execution by an
          AO of a request</para>
        </listitem>

        <listitem>
					<indexterm><primary>Reply</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Reply:</emphasis> after a service, the
          method result is sent back to the caller</para>
        </listitem>


        <listitem>
					<indexterm><primary>Wait-by-necessity</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Wait-by-necessity:</emphasis> automatic
          wait upon the use of a still awaited future</para>
        </listitem>


        <listitem>
		  <indexterm><primary>Automatic Continuation</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Automatic Continuation:</emphasis>
          transmission of futures and replies between AO and JVMs</para>
        </listitem>      

        <listitem>
		  <indexterm><primary>Group</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Group:</emphasis> a typed group of
          objects or AOs. Methods are called in parallel on all group
          members.</para>
        </listitem>

        <listitem>
					<indexterm><primary>Virtual Node</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Virtual Node (VN):</emphasis> an
          abstraction (a string) representing where to locate AOs at
          creation</para>
        </listitem>

        <listitem>
					<indexterm><primary>Deployment descriptor</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Deployment descriptor:</emphasis> an XML
          file where a mapping VN --&gt; JVMs --&gt; Machine is
          specified.</para>
        </listitem>

        <listitem>
					<indexterm><primary>Node</primary><secondary>definition</secondary></indexterm>
          <para><emphasis role="bold">Node:</emphasis> the result of mapping a
          VN to a set of JVMs. After activation, a VN contains a set of nodes,
          living in a set of JVMs.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section xml:id="MainPrinciplesAsynchronousMethodCallsAndImplicit"><info><title>Main Principles: Asynchronous Method Calls And Implicit futures</title></info>


    <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/asynchronous_method_calls_and_implicit_futures.txt"/></textobject></programlisting>
  </section>

  <section xml:id="ExplicitSynchronization_76"><info><title>Explicit Synchronization</title></info>


    <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/explicit_synchronization.txt"/></textobject></programlisting>

  </section>

  <section xml:id="ProgrammingActiveObjectsActivityAndServices_76"><info><title>Programming Active Objects' Activity And Services</title></info>


    <para>When an AO must implement an activity that is not FIFO, the
    RunActive interface has to be implemented: it specifies the AO behavior in
    the method named <literal>runActivity()</literal>:</para>

    <programlisting language="java"><textobject><textdata fileref="../../../../../programming-core/src/main/java/org/objectweb/proactive/RunActive.java"/></textobject></programlisting>
	<para>Example:</para>

   <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/RunActive_example.txt"/></textobject></programlisting>


    <para> Two other interfaces can also be specified:</para>

    <para> The method <literal> initActivity(Body body) </literal> initializes the activity of
	    the active object. It is called once before the <literal>runActivity(Body body)</literal> method.</para>

    <programlisting language="java"><textobject><textdata fileref="../../../../../programming-core/src/main/java/org/objectweb/proactive/InitActive.java"/></textobject></programlisting>

	<para>The method <literal> endActivity(Body body) </literal> finalizes the activity of
	the active object. It is called once after the execution of the <literal>runActivity(Body body)</literal> method.
    </para>

    <programlisting language="java"><textobject><textdata fileref="../../../../../programming-core/src/main/java/org/objectweb/proactive/EndActive.java"/></textobject></programlisting>

  </section>
	<!--
		//TODO: check reactive
	 -->
  <section xml:id="ReactiveActiveObject_76"><info><title>Reactive Active Object</title></info>


    <para>Even when an AO is busy doing its own work, it can remain reactive
    to external events (method calls). One just has to program non-blocking
    services to take into account external inputs.</para>

    <para><programlisting language="java">public class BusyButReactive implements RunActive {

    public void  runActivity(Body body) {
       Service service = new Service(body);
       while ( ! hasToTerminate ) {
             ...
             // Do some activity on its own ...
             ...
             // Non blocking service ...
             service.serveOldest('changeParameters', 'terminate');
             ...
             }
       }

    public void  changeParameters () {
             ......
             // change computation parameters
             }

    public void  terminate (){
             hasToTerminate=true;
             }
    }</programlisting></para>

    <para>It also allows one to specify explicit termination of AOs. Of course, the reactivity is
    up to the length of going around the loop. Similar techniques can be used
    to start, suspend, restart, and stop AOs.</para>
  </section>

  <section xml:id="Servicemethods_76"><info><title>Service methods</title></info>

	<para>The following method are in the <literal>Service</literal> class.
	They can be used to control how requests are served.</para>
    <para><emphasis role="bold">Non-blocking services:</emphasis> returns
    immediately if no matching request is pending</para>

		  <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/non-blocking_services.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Blocking services:</emphasis> waits until a
    matching request can be served</para>

		  <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/blocking_services.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Blocking timed services:</emphasis> wait a
    matching request at most a time given in ms</para>

		     <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/blocking_timed_services.txt"/></textobject></programlisting>


    <para><emphasis role="bold">Waiting primitives:</emphasis></para>

         <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/waiting_primitives.txt"/></textobject></programlisting>

    <para><emphasis role="bold">Others:</emphasis></para>

     <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/other_services.txt"/></textobject></programlisting>

  </section>

  <section xml:id="ActiveObjectCreation_76"><info><title>Active Object Creation:</title></info>


     <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/ao_creation.txt"/></textobject></programlisting>
  </section>

  <section xml:id="Groups_76"><info><title>Groups:</title></info>


    <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/groups.txt"/></textobject></programlisting>
  </section>

  <section xml:id="ExplicitGroupSynchronizations_76"><info><title>Explicit Group Synchronizations</title></info>


    <para>Methods both in Interface Group, and static in class
    PAGroup</para>

  <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/explicit_group_synchronization.txt"/></textobject></programlisting>
  </section>

  <section xml:id="OOSPMD_76"><info><title>OO SPMD</title></info>


  <programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/oospmd.txt"/></textobject></programlisting>
  </section>

  <section xml:id="Deployment_76"><info><title>Deployment</title></info>


    <para>Virtual Nodes (VN) allow one to specify the location where to create
    AOs. A VN is uniquely identified as a String, is defined in an XML
    Deployment Descriptor where it is mapped onto JVMs. JVMs are themselves
    mapped onto physical machines: VN --&gt; JVMs --&gt; Machine. Various
    protocols can be specified to create JVMs onto machines (ssh, Globus, LSF,
    PBS, rsh, rlogin, Web Services, etc.). After activation, a VN contains a
    set of nodes, living in a set of JVMs. Overall, VNs and deployment
    descriptors allow to abstract away from source code: machines, creation,
    lookup and registry protocols.</para>

    <para>Example of a deployment descriptor that provides the localhost as resource with a capacity of <code>hostCapacity</code> jvms, each jvm hosting <code> vmCapacity</code>  nodes.</para>

    <programlisting language="xml"><textobject><textdata fileref="code_snippets/referencecard/GCMD_Local.xml"/></textobject></programlisting>

    <para>An example of application deployment: </para>
      <programlisting language="xml"><textobject><textdata fileref="code_snippets/referencecard/GCMA.xml"/></textobject></programlisting>



    <para><emphasis role="bold">Deployment API</emphasis></para>
	<para>Deployment is done in several steps: load the XML descriptor file, activate the virtual nodes, and
	manipulate nodes and objects.
	</para>
		<programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/deployment_api.txt"/></textobject></programlisting>

  </section>

  <section xml:id="Exceptions_76"><info><title>Exceptions</title></info>


    <para><emphasis role="bold">Functional exceptions with
    asynchrony</emphasis></para>

		<programlisting language="java"><textobject><textdata fileref="code_snippets/referencecard/trywithcatch.txt"/></textobject></programlisting>
  </section> 

  <section xml:id="FileTransferDeployment_76"><info><title>File Transfer Deployment</title></info>

    <para>File Transfer Deployment is a tool for transferring files at
    deployment time. This files are specified using the ProActive XML
    Deployment Descriptor in the following way:</para>

    <programlisting language="xml"><textobject><textdata fileref="code_snippets/referencecard/file_transfer.txt"/></textobject></programlisting>
  </section>
</appendix>
