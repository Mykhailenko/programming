public interface Body extends LocalBodyStrategy, UniversalBody {

    /**
     * Returns whether the body is alive or not. The body is alive as long as it is processing
     * request and reply
     * 
     * @return whether the body is alive or not.
     */
    public boolean isAlive();

    /**
     * Returns whether the body is active or not. The body is active as long as it has an associated
     * thread running to serve the requests by calling methods on the active object.
     * 
     * @return whether the body is active or not.
     */
    public boolean isActive();

    /**
     * To avoid some causal ordering corruptions, the body can be temporarily set as <i>sterile</i>.
     * Then, it will not be able to send any request, except to himself and to its parent. Such
     * restriction should be necessary when sending multiple requests in parallel.
     * 
     * @param isSterile
     * @param parentUID
     * @see org.objectweb.proactive.core.body.proxy.SendingQueueProxy
     */
    public void setSterility(boolean isSterile, UniqueID parentUID);

    /**
     * Get the sterility status of the body
     * 
     * @return the sterility status
     * @see org.objectweb.proactive.core.body.proxy.SendingQueueProxy
     */
    public boolean isSterile();

    /**
     * Get the parent UniqueID of the body
     * 
     * @return the parent UniqueID
     * @see org.objectweb.proactive.core.body.proxy.SendingQueueProxy
     */
    public UniqueID getParentUID();

    /**
     * blocks all incoming communications. After this call, the body cannot receive any request or
     * reply.
     */
    public void blockCommunication();

    /**
     * Signals the body to accept all incoming communications. This call undo a previous call to
     * blockCommunication.
     */
    public void acceptCommunication();

    /**
     * Allows the calling thread to enter in the ThreadStore of this body.
     */
    public void enterInThreadStore();

    /**
     * Allows the calling thread to exit from the ThreadStore of this body.
     */
    public void exitFromThreadStore();

    /**
     * Tries to find a local version of the body of id uniqueID. If a local version is found it is
     * returned. If not, tries to find the body of id uniqueID in the known body of this body. If a
     * body is found it is returned, else null is returned.
     * 
     * @param uniqueID
     *            the id of the body to lookup
     * @return the last known version of the body of id uniqueID or null if not known
     */
    public UniversalBody checkNewLocation(UniqueID uniqueID);

    /**
     * Returns the MBean associated to this active object.
     * 
     * @return the MBean associated to this active object.
     */
    public BodyWrapperMBean getMBean();

    /**
     * Set the nodeURL of this body
     * 
     * @param newNodeURL
     *            the new URL of the node
     */
    public void updateNodeURL(String newNodeURL);

    /**
     * For setting an immediate service for this body. An immediate service is a method that will be
     * executed by the calling thread, or by a dedicated per-caller thread if uniqueThread is true.
     * 
     * @param methodName
     *            the name of the method
     * @param uniqueThread true if this immediate service should be always executed by the same thread for 
     *               a given caller, false if any thread can be used.
     */
    public void setImmediateService(String methodName, boolean uniqueThread);

    /**
     * For setting an immediate service for this body. An immediate service is a method that will be
     * executed by the calling thread.
     *
     * @param methodName the name of the method
     *
     * @deprecated Replaced by {@link #setImmediateService(String, boolean)}
     */
    @Deprecated
    public void setImmediateService(String methodName);

    /**
     * Removes an immediate service for this body An immediate service is a method that will be
     * executed by the calling thread.
     * 
     * @param methodName
     *            the name of the method
     */
    public void removeImmediateService(String methodName);

    /**
     * Adds an immediate service for this body An immediate service is a method that will be
     * executed by the calling thread, or by a dedicated per-caller thread if uniqueThread is true.
     * 
     * @param methodName
     *            the name of the method
     * @param parametersTypes
     *            the types of the parameters of the method
     * @param uniqueThread true if this immediate service should be always executed by the same thread for 
     *               a given caller, false if any thread can be used.
     *            
     */
    public void setImmediateService(String methodName, Class<?>[] parametersTypes, boolean uniqueThread);

    /**
     * Removes an immediate service for this body An immediate service is a method that will be
     * executed by the calling thread.
     * 
     * @param methodName
     *            the name of the method
     * @param parametersTypes
     *            the types of the parameters of the method
     */
    public void removeImmediateService(String methodName, Class<?>[] parametersTypes);

    /**
     * Sets the ForgetOnSend strategy when sending a request <i>methodName</i> to <i>activeObject</i>.
     * @param activeObject
     *              the destination
     * @param methodName
     *              the name of the method
     */
    public void setForgetOnSendRequest(Object activeObject, String methodName);

    /**
     * Remove the ForgetOnSend setting attached to the given <i>methodName</i> for the given <i>activeObject</i>
     * @param activeObject
     *              the destination
     * @param methodName
     *              the name of the method
     */
    public void removeForgetOnSendRequest(Object activeObject, String methodName);

    /**
     * Terminate the body. After this call the body is no more alive and no more active. The body is
     * unusable after this call. If some automatic continuations are registered in the futurepool of
     * this body, the ACThread will be killed when the last registered AC is sent.
     */
    public void terminate();

    /**
     * @param completeACs
     *            if true, this call has the same behavior than terminate(). Otherwise, the ACThread
     *            is killed even if some ACs remain in the futurepool.
     * @see #terminate(). If completeACs is true, this call has the same behavior as terminate().
     *      Otherwise, the ACThread is killed even if some ACs remain in the futurepool.
     */
    public void terminate(boolean completeACs);

    /**
     * Checks if a method methodName is declared by the reified object AND the method has the same
     * parameters as parametersTypes Note that the called method should be <i>public</i>, since
     * only the public methods can be called on an active object. Note also that a call to
     * checkMethod(methodName, null) is different to a call to checkMethod(methodName, new Class[0])
     * The former means that no checking is done on the parameters, whereas the latter means that we
     * look for a method with no parameters.
     * 
     * @param methodName
     *            the name of the method
     * @param parametersTypes
     *            an array of parameter types
     * @return true if the method exists, false otherwise
     */
    public boolean checkMethod(String methodName, Class<?>[] parametersTypes);

    /**
     * Checks if a method methodName is declared by the reified object Note that the called method
     * should be <i>public</i>, since only the public methods can be called on an active object.
     * Note that this call is strictly equivalent to checkMethod(methodName, null);
     * 
     * @param methodName
     *            the name of the method
     * @return true if the method exists, false otherwise
     */
    public boolean checkMethod(String methodName);

    public void registerIncomingFutures();
}
