public interface UniversalBody extends Serializable {
    public static Logger bodyLogger = ProActiveLogger.getLogger(Loggers.BODY);
    public static Logger sendReplyExceptionsLogger = ProActiveLogger.getLogger(Loggers.EXCEPTIONS_SEND_REPLY);

    /**
     * Receives a request for later processing. The call to this method is non blocking
     * unless the body cannot temporary receive the request.
     * @param request the request to process
     * @exception java.io.IOException if the request cannot be accepted 
     */
    public void receiveRequest(Request request) throws java.io.IOException;

    /**
     * Receives a reply in response to a former request.
     * @param r the reply received
     * @exception java.io.IOException if the reply cannot be accepted
     */
    public void receiveReply(Reply r) throws java.io.IOException;

    /**
     * Returns the url of the node this body is associated to
     * The url of the node can change if the active object migrates
     * @return the url of the node this body is associated to
     */
    public String getNodeURL();

    /**
     * Returns the UniqueID of this body
     * This identifier is unique accross all JVMs
     * @return the UniqueID of this body
     */
    public UniqueID getID();

    /**
     * Return the name of this body, which generally contains the class name of the reified object
     * @return the body name
     */
    public String getName();

    /**
     * Signals to this body that the body identified by id is now to a new
     * remote location. The body given in parameter is a new stub pointing
     * to this new location. This call is a way for a body to signal to his
     * peer that it has migrated to a new location
     * @param id the id of the body
     * @param body the stub to the new location
     * @exception java.io.IOException if a pb occurs during this method call
     */
    public void updateLocation(UniqueID id, UniversalBody body) throws java.io.IOException;

    /**
     * Returns the remote friendly version of this body
     * @return the remote friendly version of this body
     */
    public UniversalBody getRemoteAdapter();

    /**
     * Returns the name of the class of the reified object
     * @return the name of the class of the reified object
     */
    public String getReifiedClassName();

    /**
     * Enables automatic continuation mechanism for this body
     * @exception java.io.IOException if a problem occurs during this method call
     */
    public void enableAC() throws java.io.IOException;

    /**
     * Disables automatic continuation mechanism for this body
     * @exception java.io.IOException if a problem occurs during this method call
     */
    public void disableAC() throws java.io.IOException;

    /**
     * For sending a non functional heartbeat message.
     * @return depends on the message meaning
     * @exception java.io.IOException if a problem occurs during this method call
     */
    public Object receiveHeartbeat() throws IOException;

    public String registerByName(String name, boolean rebind) throws IOException, ProActiveException;

    /**
     * @return The URL of this body (using the default remote object factory)
     */
    public String getUrl();

    public String registerByName(String name, boolean rebind, String protocol) throws IOException,
            ProActiveException;
}
//@snippet-end universalbody
