package org.objectweb.proactive.core.exceptions.manager;

import org.objectweb.asm.ClassWriter;
import org.objectweb.asm.CodeVisitor;
import org.objectweb.asm.Constants;


/*
 * This is the nasty hack to bypass java checked exceptions
 */
/*
 * This interface is the entry-point to the thrower, an object implementing this
 * interface will be built by reflection. By calling the throwException() method
 * on this object, it will be possible to call the ASM generated code.
 */
interface Thrower {
    public void throwException(Throwable t);
}


public class ExceptionThrower {
    private static final String THROWER_CLASS_NAME = "TheActualExceptionThrower";
    private static final String THROWER_CLASS_PACKAGE = ExceptionThrower.class.getPackage()
                                                                              .getName();
    private static final String THROWER_CLASS_FULLNAME = THROWER_CLASS_PACKAGE +
        "." + THROWER_CLASS_NAME;
    private static final String THROWER_METHOD_NAME = "throwException";
    private static Thrower thrower = null;

    /* We load a class given its name and its binary representation */
    private static Class loadClass(String className, byte[] b)
        throws Exception {
        Class clazz = null;
        ClassLoader loader = ClassLoader.getSystemClassLoader();
        Class cls = Class.forName("java.lang.ClassLoader");
        java.lang.reflect.Method method = cls.getDeclaredMethod("defineClass",
                new Class[] { String.class, byte[].class, int.class, int.class });

        /* protected method invocaton */
        method.setAccessible(true);
        try {
            Object[] args = new Object[] {
                    className, b, new Integer(0), new Integer(b.length)
                };
            clazz = (Class) method.invoke(loader, args);
        } finally {
            method.setAccessible(false);
        }
        return clazz;
    }

    /* The first time the mechanism is used, it has to initialize the thrower */
    private static void activate() {
        ClassWriter cw = new ClassWriter(false);
        CodeVisitor cv;

        cw.visit(Constants.V1_2, Constants.ACC_PUBLIC + Constants.ACC_SUPER,
            THROWER_CLASS_FULLNAME.replace('.', '/'), "java/lang/Object",
            new String[] { Thrower.class.getName().replace('.', '/') },
            "AutoGeneratedExceptionThrower.java");

        /* Default constructor */
        cv = cw.visitMethod(Constants.ACC_PUBLIC, "<init>", "()V", null, null);
        cv.visitVarInsn(Constants.ALOAD, 0);
        cv.visitMethodInsn(Constants.INVOKESPECIAL, "java/lang/Object",
            "<init>", "()V");
        cv.visitInsn(Constants.RETURN);
        cv.visitMaxs(1, 1);

        /* throwException() */
        cv = cw.visitMethod(Constants.ACC_PUBLIC, THROWER_METHOD_NAME,
                "(Ljava/lang/Throwable;)V", null, null);
        cv.visitVarInsn(Constants.ALOAD, 1);
        cv.visitInsn(Constants.ATHROW); // No Java checks !!!
        cv.visitMaxs(1, 2);

        cw.visitEnd();

        try {
            Class clazz = loadClass(THROWER_CLASS_FULLNAME, cw.toByteArray());
            thrower = (Thrower) clazz.newInstance();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    synchronized static void throwException(Throwable t) {
        if (thrower == null) {
            activate();
        }

        if (thrower != null) {
            thrower.throwException(t);
        }
    }
}
