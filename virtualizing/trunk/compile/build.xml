<?xml version="1.0" encoding="UTF-8"?>
<project name="Scheduler" default="compile.all" basedir=".">
	<!--
		Available properties are:
			-Dtest='unitTests/**/*.class'		Override the default testsuite for junit* targets
			-Dversion="3.2.1"					Tag a build with this version
	-->

	<!--
		Create a timestamp for this build 
		If ${version} is defined its value is used as string version for this build
		Otherwise the timestamp is used
	-->

	<!-- ************
		Imports		
	-->

	<property file="${user.home}/.proactive/build.properties" />
	<import file="common.xml" />
	<import file="doc.xml" />


	<!-- ************
		Taskdefs		
	-->

	<taskdef name="if" classname="ise.antelope.tasks.IfTask" />

	<!-- ************
		Classpath		
	-->

	<tstamp>
		<format property="TODAY" pattern="yyyy-MM-dd" />
	</tstamp>

	<if name="version">
		<property name="isRelease" value="true" />

		<else>
			<property name="version" value="${TODAY}" />
		</else>
	</if>


	<!-- Default testsuite can be overriden by using the -Dtest property -->
	<if name="test">
		<fileset dir="${cl.rm.tests.dir}" id="rm.testsuite">
				<include name="${test}" />
				<exclude name="**/*$*.class" />
		</fileset>
		<fileset dir="${cl.scheduler.tests.dir}" id="scheduler.testsuite">
			<include name="${test}" />
			<exclude name="**/*$*.class" />
		</fileset>
		<else>
			<fileset dir="${cl.rm.tests.dir}" id="rm.testsuite">
				<exclude name="**/*$*.class"/>
				<include name="**/*Test*.class" />
			</fileset>
			<fileset dir="${cl.scheduler.tests.dir}" id="scheduler.testsuite">
				<exclude name="**/*$*.class"/>
				<include name="**/*Test*.class" />
			</fileset>
		</else>
	</if>		
	
	<!-- ************
		Compilation		
	-->

	<target name="compile.all" depends="compile.core" description="Build all class files" />

	<target name="compile.core" description="Compile all core stuffs">
		<mkdir dir="${cl.core.dir}"/>
		<mkdir dir="${cl.core.tests.dir}"/>
	
		<copy toDir="${cl.core.dir}">
			<fileset dir="${src.core.dir}" excludes="**/*.java"/>
		</copy>

		<copy toDir="${cl.core.tests.dir}">
				<fileset dir="${src.core.tests.dir}" excludes="**/*.java"/>
		</copy>
		
		<javac 
			srcdir="${src.core.dir}" 
			destdir="${cl.core.dir}" 
			deprecation="on" 
			source="${source}" 
			debug="${debug}"  >
		
			<classpath refid="core.libs"/>
			<include name="**/*.java"/>
		</javac>

		<javac 
			srcdir="${src.core.tests.dir}" 
			destdir="${cl.core.tests.dir}" 
			deprecation="on" 
			source="${source}" 
			debug="${debug}"  >
		
			<classpath refid="core.libs"/>
			<classpath path="${cl.core.dir}"/>
			<include name="**/*.java"/>
		</javac>		
	</target>

        <target name="compile.drivers" depends="compile.driver.vmware, compile.driver.qemu, compile.driver.xen, compile.driver.virtualbox" description=""/>

	<macrodef name="compile.driver">
		<attribute name="driver.name"/>

		<sequential>
			<mkdir dir="${classes.dir}/@{driver.name}"/>
			<copy toDir="${classes.dir}/@{driver.name}">
				<fileset dir="${src.dir}/@{driver.name}/src" excludes="**/*.java"/>
			</copy>

			<mkdir dir="${classes.dir}/@{driver.name}-test"/>
			<copy toDir="${classes.dir}/@{driver.name}-test">
				<fileset dir="${src.dir}/@{driver.name}/testss" excludes="**/*.java"/>
			</copy>
		
			<javac 
				srcdir="${src.dir}/@{driver.name}/src" 
				destdir="${classes.dir}/@{driver.name}" 
				deprecation="on" 
				source="${source}" 
				debug="${debug}"  >
		
				<classpath refid="core.libs"/>
				<include name="**/*.java"/>
			</javac>
			
			<javac 
				srcdir="${src.dir}/@{driver.name}/test" 
				destdir="${classes.dir}/@{driver.name}-test" 
				deprecation="on" 
				source="${source}" 
				debug="${debug}"  >
		
				<classpath refid="core.libs"/>
				<classpath path="${classes.dir}/@{driver.name}"/> 
				<include name="**/*.java"/>
			</javac>
		</sequential>


	<target name="compile.driver.vmware">
		<compile.driver driver.name="vmware"/>
	</target>

	<target name="compile.driver.qemu">
		<compile.driver driver.name="qemu"/>
	</target>

	<target name="compile.driver.xen">
		<compile.driver driver.name="xen"/>
	</target>

	<target name="compile.driver.virtualbox">
		<compile.driver driver.name="virtualbox"/>
	</target>

    <!-- ************
		Deploy
	-->
	
	<target name="deploy.lib" depends=""  description="">
        	<copy todir="${deploy.dir}" flatten="no">
        	    <fileset dir="${src.dir}/*/lib"/>
    	    	</copy>
	</target>
	
	<target name="deploy.jar" depends="compile.all"  description="">
		<jar destfile="${deploy.dir}/virtualization.jar">
			<fileset dir="${cl.scheduler.dir}" includes="**" />
	        </jar>
	</target>

	<target name="deploy.all" depends="deploy.jar, deploy.lib" description=""/>

	
	<!-- ************
		ing		
	-->

	<macrodef name="junitMacro">
		<attribute name="testsuite"/>
		<element name="jvmargs" optional="yes" />
		<element name="additionalClasspath" optional="yes" />
		<sequential>

			<mkdir dir="${junit.dir}" />
			<junit printsummary="yes" forkmode="perTest" showoutput="${junit.showoutput}">
				<jvmarg value="-Dproactive.home=${base.dir}" />
				<jvmarg value="-Dpa.scheduler.home=${base.dir}" />
				<jvmarg value="-Dpa.rm.home=${base.dir}" />
				<classpath>
					<additionalClasspath />
					<path refid="test.classpath" />
				</classpath>

				<jvmarg value="-Djava.security.policy=${base.dir}/compile/proactive.java.policy" />
				<jvmarg value="-Dlog4j.configuration=file:${base.dir}/compile/proactive-log4j" />

				<jvmargs />

				<!--
					Remote Debug:
					<jvmarg value="-Xdebug" />
					<jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8000" />
					
					Yourkit (don't forget to set your LD_LIBRARY_PATH):
					<jvmarg value="-agentlib:yjpagent" />
				-->

				<formatter type="xml" />


				<batchtest fork="yes" todir="${junit.dir}">
					<fileset refid="@{testsuite}" />
				</batchtest>
			</junit>
		</sequential>
	</macrodef>

	<target name="junit.rm" depends="deploy.rm" description="Run resource manager's tests">
		<junitMacro testsuite="rm.testsuite"/>
	</target>

	<target name="junit.scheduler" depends="deploy.scheduler" description="Run scheduler's tests">		
		<junitMacro testsuite="scheduler.testsuite"/>
	</target>

	<target name="junit.all" depends="junit.rm, junit.scheduler" description="Run all tests"/>
	
	<target name="with.clover">
		<taskdef resource="cloverlib.xml" classpath="${base.dir}/compile/lib/clover.jar" />
		<clover-setup initString="${compile.dir}/ProActiveCoverage.db" />
	</target>


	<target name="clover.report" depends="with.clover">
		<taskdef resource="cloverlib.xml" classpath="${base.dir}/compile/lib/clover.jar" />
		<!-- generate a historypoint for the current coverage -->
		<clover-historypoint historyDir="${clover.historypoint.dir}" />
		<clover-report>
			<!-- generate a current report -->
			<current title="ProActive_Scheduler" outfile="${clover.report.dir}">
				<testresults dir="${junit.dir}" includes="TEST-*.xml" />
				<format type="html" />
				<fileset dir="${src.dir}">
					<include name="scheduler/src/**/*.java" />
					<include name="scheduler/tests/**/*.java" />
					<include name="resource-manager/src/**/*.java" />
					<include name="resource-manager/tests/**/*.java" />
				</fileset>
				<sourcepath>
					<dirset dir="${src.dir}">
						<include name="scheduler/src" />
						<include name="resource-manager/src" />
					</dirset>
				</sourcepath>
			</current>
			<!-- generate a historical report -->
			<historical outfile="${clover.historyreport.dir}" historyDir="${clover.historypoint.dir}">
				<format type="html" />
			</historical>
		</clover-report>
		<!--
		<clover-clean />
-->
	</target>

	<target name="junit.clover" depends="with.clover, clean, deploy.all" description="Run all tests with code coverage (type: 'build junit.clover clover.report')">
		<copy file="${compile.dir}/lib/clover.jar" todir="${deploy.lib.dir}"/>
		<!-- copy all RM tests file to scheduler test directory in order
		 to have one fileset for clover
		( We can define one fileset and include cl.rm.tests.dir and cl.rm.tests.dir,
		but cl.rm.tests.dir and cl.rm.tests.dir will prefix  package names :(-->
		<copy todir="${cl.scheduler.tests.dir}">
				<fileset dir="${cl.rm.tests.dir}"/>
			</copy>
		<junitMacro testsuite="scheduler.testsuite">
			<additionalClassPath>
				<pathelement location="${ant.home}/lib/clover.jar" />
			</additionalClassPath>
		</junitMacro>
	</target>	

	<macrodef name="eclipse_format_m">
		<attribute name="loglevel" default="WARN" />
		<element name="sourcefileset" optional="false" />

		<sequential>
			<taskdef name="javaformatter" classname="org.hibernate.tool.ant.JavaFormatterTask">
				<classpath>
					<fileset dir="${dev.dir}/lib">
						<include name="*.jar" />
					</fileset>
				</classpath>
			</taskdef>

			<copy file="${compile.dir}/eclipse_formatter_config.xml" tofile="${compile.dir}/eclipse_formatter_config.properties" />

			<replaceregexp file="${compile.dir}/eclipse_formatter_config.properties" match='^&lt;(.xml|/?profile).*' replace="" byline="true" />

			<replaceregexp file="${compile.dir}/eclipse_formatter_config.properties" match='.*\"(.*)\".*\"(.*)\".*' replace="\1=\2" byline="true" />

			<javaformatter configurationFile="eclipse_formatter_config.properties">
				<sourcefileset />
			</javaformatter>
		</sequential>
	</macrodef>

	<target name="format" description="hibernate's eclipse-based source code formatter">
		<eclipse_format_m>
			<sourcefileset>
				<fileset dir="${src.scheduler.dir}" includes="**/*.java" />
				<fileset dir="${src.scheduler.tests.dir}" includes="**/*.java" />
				<fileset dir="${src.rm.dir}" includes="**/*.java" />
				<fileset dir="${src.rm.tests.dir}" includes="**/*.java" />
				<fileset dir="${rcp.plugins.dir}" includes="**/*.java" />
			</sourcefileset>
		</eclipse_format_m>
	</target>

	<!-- ************
		Misc		
	-->

	<target name="clean" description="Remove all generated files">
		<delete dir="${classes.dir}" />
		<delete dir="${release.dir}" />
		<delete dir="${deploy.dir}" />
		<delete dir="${docs.dir}" />
		<delete dir="${classlibs.dir}" />
		<delete dir="${test.classes.dir}" />
		<delete file="tests.log" />
		<delete dir="${junit.dir}" />
	</target>


	<target name="-init">
		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${classes.dir}" />
		<mkdir dir="${cl.examples.dir}" />
		<mkdir dir="${cl.extra.dir}" />
		<mkdir dir="${cl.extensions.dir}" />
		<mkdir dir="${cl.proactive.dir}" />
		<mkdir dir="${cl.test.dir}" />
		<mkdir dir="${cl.utils.dir}" />
		<mkdir dir="${cl.benchmarks.dir}" />

		<echo message="--- Debugging is ${debug} ---" />
	</target>


	<target name="-configurationCopy" depends="-init">
		<copy toDir="${cl.proactive.dir}">
			<fileset dir="${src.proactive.dir}">
				<include name="org/objectweb/proactive/core/config/proactive-log4j" />
				<include name="org/**/*.xml" />
				<include name="org/**/*.fractal" />
				<include name="org/**/*.properties" />
				<include name="org/**/*.xsd" />
				<include name="org/**/*.png" />
				<include name="org/objectweb/proactive/core/component/adl/xml/proactive.dtd" />
				<include name="org/**/jaas.config" />
			</fileset>
		</copy>
	</target>

	<!-- ================================================================ -->
	<!--  Scheduler Specific - Convert Schemas from Relax NG to XMLSchema -->
	<!-- ================================================================ -->
	<!-- MUST BE CALLED FROM AN INRIA MACHINE ON PRODUCTION NETWORK -->
	<target name="convertSchemas" description="convert Schemas from Relax NG Compact Syntax to Relax NG XML Syntax and to XMLSchema inside the scheduler.">
		<property name="schedulerSchemas.website.dir" value="/net/servers/www-sop/teams/oasis/proactive/schemas/jobdescriptor/0.91" />
		<property name="schedulerSchemas.job.name" value="schedulerjob" />
		<taskdef name="trang" classname="net.amadan.trang.ant.TrangTask">
			<classpath>
				<fileset dir="${base.dir}/dev/lib/trang">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<!-- Convert Relax NG schema from compact syntax to xml syntax -->
		<trang failonerror="true" input="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.rnc" output="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.rng" />

		<!-- Convert Relax NG schema from compact syntax to W3C Schema -->
		<trang failonerror="true" input="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.rnc" output="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.xsd" />
		<xslt style="${base.dir}/dev/lib/trang/removeStuff.xsl" in="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.xsd" out="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/temp.xsd" />
		<delete>
			<fileset dir="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/">
				<include name="xsi.xsd" />
				<include name="schedulerjob.xsd" />
			</fileset>
		</delete>
		<move file="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/temp.xsd" tofile="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.xsd" />
		<copy file="${src.scheduler.dir}/${scheduler.path}/common/xml/schemas/jobdescriptor/0.91/${schedulerSchemas.job.name}.xsd" tofile="${schedulerSchemas.website.dir}/${schedulerSchemas.job.name}.xsd" />
	</target>
	
	<target name="scheduler.libClean" description="Clean all required libraries for scheduler/rm plugins">
		<delete dir="${rcp.plugins.dir}/${scheduler.plugin.lib}/lib" />
	</target>

	<target name="scheduler.libCopy" depends="deploy.all" description="Copy all required libraries to scheduler/rm plugins">
		<copy todir="${rcp.plugins.dir}/${scheduler.plugin.lib}/lib" includeemptydirs="no">
			<fileset dir="${deploy.dir}/lib" excludes="ProActive_tests.jar"/>
		</copy>		
	</target>		
	
</project>
